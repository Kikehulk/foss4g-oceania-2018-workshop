---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC for FOSS4G Oceania Workshop with public subnet and two Availability Zones'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC Configuration
      Parameters:
      - ClassB
    ParameterLabels:
      ClassB:
        default: Class B of VPC

Parameters:
  ClassB:
    Description: 'Class B of VPC CIDR (10.XXX.0.0/16)'
    Type: Number
    Default: 99
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255

Outputs:
  VPC:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: 'foss4g-oceania-workshop-vpc'
  CidrBlock:
    Description: 'CidrBlock'
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: 'foss4g-oceania-workshop-cidr-block'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
    Export:
      Name: 'foss4g-oceania-workshop-subnets-public'
  RouteTablePublic:
    Description: 'Route table public.'
    Value: !Ref RouteTablePublic
    Export:
      Name: 'foss4g-oceania-workshop-route-table-public'
  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: 'foss4g-oceania-workshop-subnet-a-public'
  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: 'foss4g-oceania-workshop-subnet-b-public'
  NetworkAclPublic:
    Description: 'Network Acl public.'
    Value: !Ref NetworkAclPublic
    Export:
      Name: 'foss4g-oceania-workshop-network-acl-public'

Resources:
  # VPC Configuration
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub 'foss4g-oceania-workshop-10.${ClassB}.0.0/16'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub 'foss4g-oceania-workshop-10.${ClassB}.0.0/16'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnet Configuration for Public Subnet
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'foss4g-oceania-workshop-subnet-a-public'
      - Key: Reach
        Value: public
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.16.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'foss4g-oceania-workshop-subnet-b-public'
      - Key: Reach
        Value: public

  # Route Tables
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'foss4g-oceania-workshop-route-table-public'
  RouteTableAssociationPublicA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationPublicB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTablePublicInternetRouteIPv4:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Network ACLs
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'foss4g-oceania-workshop-public'
  SubnetNetworkAclAssociationPublicA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationPublicB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic

  # Public Subnet Inbound ACL Entries
  NetworkAclEntryInPublicAllowSshIPv4:
      Type: 'AWS::EC2::NetworkAclEntry'
      Properties:
        NetworkAclId: !Ref NetworkAclPublic
        RuleNumber: 122
        Protocol: 6 # TCP
        RuleAction: allow
        Egress: false
        CidrBlock: '0.0.0.0/0' # Internet
        PortRange:
          From: '22'
          To: '22'
  NetworkAclEntryInPublicAllowHttpIPv4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 123
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0' # Internet
      PortRange:
        From: '80'
        To: '80'
  NetworkAclEntryInPublicAllowHttpsIPv4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 124
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0' # Internet
      PortRange:
        From: '443'
        To: '443'
  NetworkAclEntryInPublicAllowEphemeralPortsIPv4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 130
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0' # Internet
      PortRange: # Ephemeral Ports: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html#VPC_ACLs_Ephemeral_Ports
        From: '1024'
        To: '65535'

  # Public Subnet Outbound ACL Entries
  NetworkAclEntryOutPublicAllowAllIPv4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 150
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange: # Allowing all outbound traffic
        From: 1
        To: 65535
